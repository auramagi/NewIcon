import Foundation
import SwiftUI
import UniformTypeIdentifiers

enum PreviewData {
    enum Icon {
        case bestRepresentation(ofType: UTType)
        
        var image: NSImage {
            switch self {
            case let .bestRepresentation(type):
                let sampleIcon = NSWorkspace.shared.icon(for: type)
                guard let bestRepresentation = sampleIcon.bestRepresentation(for: .infinite, context: nil, hints: [:]) else {
                    return sampleIcon
                }
                
                let result = NSImage()
                result.addRepresentation(bestRepresentation)
                return result
            }
        }
        
        static var appIcon: Self { .bestRepresentation(ofType: .applicationBundle) }
        
        static var folder: Self { .bestRepresentation(ofType: .folder) }
    }
    
    static let text = "Hello world"
}

public protocol _IconTemplate {
    init(icon: NSImage, data: Data?) throws
    
    var asAnyView: AnyView { get }
}

public protocol IconTemplate: View, _IconTemplate {
    associatedtype Content
    
    /// Used when `Content` is typealised to `Never`.
    init(icon: NSImage)
    
    /// Used when `Content` is `Decodable`.
    init(icon: NSImage, content: Content)
    
    /// Decoder used for `Decodable` content.
    static var decoder: JSONDecoder { get }
    
    /// Create a sample template to use in previews.
    static func makePreview(image: NSImage) -> Self
}

public extension IconTemplate where Content: Decodable {
    init(icon: NSImage) {
        fatalError("Template expects non-nil content.")
    }
    
    init(icon: NSImage, data: Data?) throws {
        guard let data = data else { throw "Template expects non-nil content." }
        let content = try Self.decoder.decode(Content.self, from: data)
        self.init(icon: icon, content: content)
    }
    
    init<T>(icon: NSImage, data: Data?) throws where Content == T? {
        let content: Content
        if let data = data {
            content = try Self.decoder.decode(Content.self, from: data)
        } else {
            content = nil
        }
        self.init(icon: icon, content: content)
    }
}

public extension IconTemplate where Content == Never {
    init(icon: NSImage, data: Data?) throws {
        guard data == nil else { throw "Template expects content to be nil." }
        self.init(icon: icon)
    }
    
    init(icon: NSImage, content: Content) {
        fatalError("How did you get here?")
    }
}

extension IconTemplate {
    public static var decoder: JSONDecoder {
        let decoder = JSONDecoder()
        decoder.allowsJSON5 = true
        return decoder
    }
    
    public var asAnyView: AnyView {
        AnyView(self)
    }
    
    static func makePreview(icon: PreviewData.Icon) -> Self {
        makePreview(image: icon.image)
    }
}

internal extension IconTemplate {
    @ViewBuilder static func makeDefaultPreviews(factory: (PreviewData.Icon) -> Self) -> some View {
        Group {
            factory(.appIcon)
                .previewDisplayName("App icon")
            
            factory(.folder)
                .previewDisplayName("Folder")
        }
        .frame(width: 1024, height: 1024)
        .colorScheme(.light)
        .ignoresSafeArea()
        .drawingGroup()
        .previewLayout(.sizeThatFits)
    }
}

public extension IconTemplate where Content == String {
    static func makePreview(icon: NSImage) -> Self {
        .init(icon: icon, content: PreviewData.text)
    }
}

public extension IconTemplate where Content == String? {
    static func makePreview(icon: NSImage) -> Self {
        .init(icon: icon, content: PreviewData.text)
    }
}

public extension IconTemplate where Content == Never {
    static func makePreview(icon: NSImage) -> Self {
        .init(icon: icon)
    }
}

public extension IconTemplate where Self: PreviewProvider {
    static var previews: some View {
        makeDefaultPreviews(factory: makePreview(icon:))
    }
}

extension String: Error { }

@_cdecl("isIconTemplate")
public func isIconTemplate(type: Any) -> Bool {
    type as? _IconTemplate.Type != nil
}

@_cdecl("renderIconTemplate")
public func renderTemplate(type: Any, content: Any) -> Any {
    var result: Result<AnyView, Error>
    do {
        guard let (icon, data) = content as? (NSImage, Data?) else { throw "Incorrect renderIconTemplate arguments" }
        guard let resolvedType = type as? _IconTemplate.Type else { throw "Incorrect template type \(type)" }
        result = .success(try resolvedType.init(icon: icon, data: data).asAnyView)
    } catch {
        result = .failure(error)
    }
    return result
}
