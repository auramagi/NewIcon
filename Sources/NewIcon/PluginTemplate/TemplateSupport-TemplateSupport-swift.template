import Foundation
import SwiftUI
import UniformTypeIdentifiers

enum PreviewData {
    enum Icon {
        case bestRepresentation(ofType: UTType)
        
        var image: NSImage {
            switch self {
            case let .bestRepresentation(type):
                let sampleIcon = NSWorkspace.shared.icon(for: type)
                guard let bestRepresentation = sampleIcon.bestRepresentation(for: .infinite, context: nil, hints: [:]) else {
                    return sampleIcon
                }
                
                let result = NSImage()
                result.addRepresentation(bestRepresentation)
                return result
            }
        }
        
        static var appIcon: Self { .bestRepresentation(ofType: .applicationBundle) }
        
        static var folder: Self { .bestRepresentation(ofType: .folder) }
    }
    
    static let text = "Hello world"
}

public protocol _ImageTemplate {
    init(image: NSImage, data: Data) throws
    
    var asAnyView: AnyView { get }
}

public protocol ImageTemplate: View, _ImageTemplate {
    associatedtype Content: Decodable
    
    init(image: NSImage, content: Content)
    
    static var decoder: JSONDecoder { get }
}

public extension ImageTemplate {
    static var decoder: JSONDecoder {
        let decoder = JSONDecoder()
        decoder.allowsJSON5 = true
        return decoder
    }
    
    init(image: NSImage, data: Data) throws {
        let content = try Self.decoder.decode(Content.self, from: data)
        self.init(image: image, content: content)
    }
    
    var asAnyView: AnyView {
        AnyView(self)
    }
}

public extension ImageTemplate where Self: PreviewProvider, Content == String {
    internal static func makePreview(icon: PreviewData.Icon) -> Self {
        .init(image: icon.image, content: PreviewData.text)
    }
    
    static var previews: some View {
        Group {
            makePreview(icon: .appIcon)
                .previewDisplayName("App icon")
            
            makePreview(icon: .folder)
                .previewDisplayName("Folder")
        }
        .frame(width: 1024, height: 1024)
        .colorScheme(.light)
        .drawingGroup()
        .previewLayout(.sizeThatFits)
    }
}

extension String: Error { }

@_cdecl("isImageTemplate")
public func isImageTemplate(type: Any) -> Bool {
    type as? _ImageTemplate.Type != nil
}

@_cdecl("renderImageTemplate")
public func renderTemplate(type: Any, content: Any) -> Any {
    var result: Result<AnyView, Error>
    do {
        guard let (image, data) = content as? (NSImage, Data) else { throw "Incorrect renderTemplate arguments" }
        guard let resolvedType = type as? _ImageTemplate.Type else { throw "Incorrect template type \(type)" }
        result = .success(try resolvedType.init(image: image, data: data).asAnyView)
    } catch {
        result = .failure(error)
    }
    return result
}
